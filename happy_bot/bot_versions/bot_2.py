import os
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ParseMode
from aiogram.utils import executor
from datetime import datetime, time, timedelta
from pytz import timezone
from django.conf import settings
from myapp.models import BDays

# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ —ñ –æ–±'—î–∫—Ç –±–æ—Ç–∞
bot = Bot(token=os.environ['BOT_TOKEN'], parse_mode=ParseMode.HTML)
# —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –æ–±'—î–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dp = Dispatcher(bot, storage=MemoryStorage())
# –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ä—ñ–≤–µ–Ω—å –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)


# —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞—Å —Å—Ç–∞–Ω—ñ–≤ –¥–ª—è FSM (Finite State Machine)
class BirthdaysStates(StatesGroup):
    waiting_for_birthday_date = State()


# —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –ø–æ–≤–µ—Ä—Ç–∞—î —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ "–≥–æ–¥–∏–Ω–∏:—Ö–≤–∏–ª–∏–Ω–∏:—Å–µ–∫—É–Ω–¥–∏"
def get_current_time():
    tz = timezone(settings.TIME_ZONE)
    return datetime.now(tz).strftime('%H:%M:%S')


# —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def send_birthday_reminder(bday, chat_id):
    message = f"–°—å–æ–≥–æ–¥–Ω—ñ {bday.title} –≤–∏–ø–æ–≤–Ω—é—î {bday.get_age()} —Ä–æ–∫—ñ–≤! üéâüéÇüéà"
    if bday.content:
        message += f"\n<b>–û–ø–∏—Å:</b> {bday.content}"
    await bot.send_photo(chat_id=chat_id, photo=bday.photo, caption=message)


# —Ñ—É–Ω–∫—Ü—ñ—è, —è–∫–∞ —à—É–∫–∞—î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö –∑–∞–ø–∏—Å–∏ –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—é—Ç—å —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ–π –¥–∞—Ç—ñ
async def find_birthdays():
    today = datetime.now().date()
    bdays = BDays.objects.filter(date__month=today.month, date__day=today.day)
    return bdays


# —Ñ—É–Ω–∫—Ü—ñ—è-—Ö–µ–Ω–¥–ª–µ—Ä, —è–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message_handler(Command('start'))
async def start(message: types.Message):
    chat_id = message.chat.id
    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}!"
                         f" –Ø –±–æ—Ç, —è–∫–∏–π –±—É–¥–µ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –¥–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.")